@page "/"
@page "/index"
@inject ITextConsumer TextConsumer

<h1>Word Counter</h1>

Word counter application gives you three ways of calculating number of words in text:
<ol>
    <li>Calculate number of words in text entered from text field</li>
    <li>Calculate number of words in uploaded txt file</li>
    <li>Calculate number of words by selecting specific text from table</li>
</ol>
<hr />

<div style="padding-left: 20px">
    <h3>Input Field</h3>
    <InputForm Text="Text" OnValidSubmit="CalculateNumberOfWordsFromTextControl" ButtonName="@("Calculate")" />
    @if (!string.IsNullOrEmpty(Text.Content) && inputResult != 0)
    {
        <div class="form-group">
            <div class="alert alert-success" role="alert">
                Total number of words is @inputResult
            </div>
        </div>
    }
    <hr />

    <h3>File Upload</h3>
    <InputTextFile />
    <hr />

    <h3>Database</h3>
    <GenericList List="UploadedTextRecords" Result="databaseWordResult">
        <ElementTemplate Context="item">
            <IndividualTextContent Text="item" CalculateWords="CalculateNumberOfWordsFromDatabase" DeleteText="DeleteText" />
        </ElementTemplate>
    </GenericList>
</div>

@code{
    private WordCounter.Shared.Entities.Text Text = new WordCounter.Shared.Entities.Text();
    private List<WordCounter.Shared.Entities.Text> UploadedTextRecords = new List<WordCounter.Shared.Entities.Text>();
    private string text = "";
    int inputResult = 0, databaseWordResult = 0;

    /// <summary>
    /// OnInitializedAsync method
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        UploadedTextRecords = await TextConsumer.GetTexts();
    }

    /// <summary>
    /// Calculates number of words in text from input field
    /// </summary>
    /// <returns></returns>
    private async Task CalculateNumberOfWordsFromTextControl()
    {
        inputResult = 0;
        databaseWordResult = 0;
        inputResult = await TextConsumer.CalculateNumberOfWords(Text);
    }

    /// <summary>
    /// Calculates number of words in text red from database
    /// </summary>
    /// <param name="currentText">Current Text</param>
    /// <returns></returns>
    private async Task CalculateNumberOfWordsFromDatabase(WordCounter.Shared.Entities.Text currentText)
    {
        inputResult = 0;
        databaseWordResult = 0;
        databaseWordResult = await TextConsumer.CalculateNumberOfWords(currentText);
    }

    /// <summary>
    /// Deletes text
    /// </summary>
    /// <param name="currentText">Current Text</param>
    /// <returns></returns>
    private async Task DeleteText(WordCounter.Shared.Entities.Text currentText)
    {
        databaseWordResult = 0;
        await TextConsumer.DeleteText(currentText.Id);
        UploadedTextRecords = await TextConsumer.GetTexts();
    }
}